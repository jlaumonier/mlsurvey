from sklearn.preprocessing import StandardScaler

import mlsurvey as mls
from mlsurvey.workflows.tasks import BaseTask


class PrepareDataTask(BaseTask):
    """
    prepare data from raw data generated by LoadDataTask
    """

    def requires(self):
        return mls.sl.workflows.tasks.LoadDataTask(logging_directory=self.logging_directory,
                                                   logging_base_directory=self.logging_base_directory,
                                                   config_filename=self.config_filename,
                                                   config_directory=self.config_directory,
                                                   base_directory=self.base_directory,
                                                   mlflow_run_id=self.mlflow_run_id)

    def run(self):
        """
        Run the task
        """
        loaded_data = self.log.load_input(self.input()['raw_data'].filename)
        raw_data = loaded_data['raw_data']

        # convert categorical to int
        cat_columns = raw_data.df.select_dtypes(['object']).columns
        raw_data.df[cat_columns] = raw_data.df[cat_columns].astype('category')
        raw_data.df[cat_columns] = raw_data.df[cat_columns].apply(lambda c: c.cat.codes)

        x_transformed = StandardScaler().fit_transform(raw_data.x)
        data = raw_data.copy_with_new_data([x_transformed, raw_data.y])
        data_to_save = {'data': data}
        self.log.save_input(data_to_save, metadata_filename=self.output()['data'].filename)

    def output(self):
        data_json_filename = 'data.json'
        target_data = mls.sl.workflows.tasks.FileDirLocalTarget(directory=self.log.directory,
                                                                filename=data_json_filename)
        target = {'data': target_data}
        return target
